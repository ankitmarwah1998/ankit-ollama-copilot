{
  "timestamp": "20250704_151642",
  "diff": "diff --git a/README.md b/README.md\nindex 8d8dcf0..f7b6474 100644\n--- a/README.md\n+++ b/README.md\n@@ -2,3 +2,6 @@\n #test2\n # trigger\n # Trigger\n+# Testing AI Comment\n+# Test Ollama Integration\n+# Testing AI comment\ndiff --git a/__pycache__/model.cpython-310.pyc b/__pycache__/model.cpython-310.pyc\nnew file mode 100644\nindex 0000000..936da67\nBinary files /dev/null and b/__pycache__/model.cpython-310.pyc differ\ndiff --git a/app.py b/app.py\nindex 6874014..4713759 100644\n--- a/app.py\n+++ b/app.py\n@@ -1,4 +1,5 @@\n from flask import Flask, request, jsonify\n+from model import analyze_diff\n \n app = Flask(__name__)\n \n@@ -6,11 +7,15 @@ app = Flask(__name__)\n def analyze():\n     data = request.get_json()\n     diff = data.get(\"diff\", \"\")\n-    \n-    if not diff:\n+\n+    if not diff.strip():\n         return jsonify({\"error\": \"No diff provided\"}), 400\n \n-    return jsonify({\"message\": f\"Received diff of length {len(diff)}\"})\n+    try:\n+        response = analyze_diff(diff)\n+        return jsonify({\"analysis\": response})\n+    except Exception as e:\n+        return jsonify({\"error\": str(e)}), 500\n \n if __name__ == \"__main__\":\n     app.run(host=\"0.0.0.0\", port=5000, debug=True)\ndiff --git a/model.py b/model.py\nindex a942a26..654d365 100644\n--- a/model.py\n+++ b/model.py\n@@ -1,6 +1,45 @@\n-def analyze_diff(diff):\n-if not diff.strip():\n-return \"No meaningful changes detected.\"\n-if \"print\" in diff:\n-return \"\u26a0\ufe0f Detected use of print statements. Consider using logging.\"\n-return f\"\u2705 Analyzed diff of {len(diff)} characters. No issues found.\"\n+import requests\n+import json\n+from datetime import datetime\n+import os\n+\n+def analyze_diff(diff: str) -> str:\n+    if not diff.strip():\n+        return \"No diff provided.\"\n+\n+    prompt = f\"\"\"\n+You are a DevOps AI assistant. Analyze the following git diff and:\n+\n+1. Summarize the intent of the change.\n+2. Recommend a deployment strategy (blue-green, canary, rolling, etc.) with justification.\n+3. List infrastructure components impacted (e.g., frontend, backend, database).\n+4. Suggest tests to run before deploying.\n+\n+Git Diff:\n+{diff}\n+\"\"\"\n+\n+    response = requests.post(\n+        \"http://localhost:11434/api/generate\",\n+        json={\n+            \"model\": \"gemma:2b\",\n+            \"prompt\": prompt,\n+            \"stream\": False\n+        }\n+    )\n+\n+    result = response.json()\n+    analysis = result.get(\"response\", \"No response from AI.\")\n+\n+    # Save to logs with timestamp\n+    os.makedirs(\"logs\", exist_ok=True)\n+    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n+    with open(f\"logs/response_{timestamp}.json\", \"w\") as f:\n+        json.dump({\n+            \"timestamp\": timestamp,\n+            \"diff\": diff,\n+            \"response\": analysis\n+        }, f, indent=2)\n+\n+    return analysis\n+\ndiff --git a/requirements.txt b/requirements.txt\nindex 7e10602..28d0b96 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1 +1,3 @@\n flask\n+requests\n+",
  "response": "## Summary of the intent\n\nThe code aims to analyze a Git diff between two files (README and app.py) and identify potential issues related to the use of print statements and the inclusion of a new file (model.py).\n\n## Recommended deployment strategy\n\n**Rolling rollout with canary deployment:**\n\n1. Deploy the code to a staging environment with a small group of users.\n2. Collect feedback on the performance and stability of the new feature.\n3. Rollout the code to the entire production environment after resolving any issues detected in the canary deployment.\n\n## Infrastructure components impacted\n\n* Frontend\n* Backend\n* Database\n\n## Tests to run before deploying\n\n* Test the functionality of the new feature in a non-production environment.\n* Check for any issues with the inclusion of the new file (model.py).\n* Perform security testing to ensure no malicious code is introduced."
}